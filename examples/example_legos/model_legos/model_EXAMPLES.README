#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2016, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#    Ellad B. Tadmor
#    Valeriu Smirichinski
#    Stephen M. Whalen
#

#
# Release: This file is part of the kim-api.git repository.
#


This file contains a table of information about the example Models provided
with this release of the KIM API package.

***  List of the example Models  ***

Model name                         Language  NBC             Loca/Iter  Half/Full   Published
                                                                                    parameters
----------------------------------------------------------------------------------------------

ex_model_Al_PF_ErcolessiAdams      F03       NEIGH_RVEC_H    Iterator   Half        NO
                                             NEIGH_PURE_H    Locator    Full
                                             NEIGH_RVEC_F
                                             NEIGH_PURE_F
                                             MI_OPBC_H
                                             MI_OPBC_F
                                             CLUSTER

ex_model_ArNe_P_MLJ_NEIGH_RVEC_F   F03       NEIGH_RVEC_F    Locator    Full        YES

ex_model_Ar_P_LJ                   F03       NEIGH_RVEC_H    Iterator   Half        YES
 - based on model_driver_P_LJ                NEIGH_PURE_H    Locator    Full
                                             NEIGH_RVEC_F
                                             NEIGH_PURE_F
                                             MI_OPBC_H
                                             MI_OPBC_F
                                             CLUSTER

ex_model_Ar_P_MLJ_C                C         NEIGH_RVEC_H    Iterator   Half        NO
                                             NEIGH_PURE_H    Locator    Full 
                                             NEIGH_RVEC_F
                                             NEIGH_PURE_F
                                             MI_OPBC_H
                                             MI_OPBC_F
                                             CLUSTER

ex_model_Ar_P_MLJ_CLUSTER_C        C         CLUSTER         N/A        N/A         YES

ex_model_Ar_P_MLJ_CLUSTER_F03      F03       CLUSTER         N/A        N/A         YES

ex_model_Ar_P_MLJ_F03              F03       NEIGH_RVEC_H    Iterator   Half        NO
                                             NEIGH_PURE_H    Locator    Full
                                             NEIGH_RVEC_F
                                             NEIGH_PURE_F
                                             MI_OPBC_H
                                             MI_OPBC_F
                                             CLUSTER

ex_model_Ar_P_MLJ_MI_OPBC_H_F      F03       MI_OPBC_H       Locator    Half        YES
                                             MI_OPBC_F                  Full

ex_model_Ar_P_MLJ_NEIGH_PURE_H_F   F03       NEIGH_PURE_H    Locator    Half        YES
                                             NEIGH_PURE_F               Full

ex_model_Ar_P_MLJ_NEIGH_RVEC_F     F03       NEIGH_RVEC_F    Locator    Full        YES

ex_model_Ar_P_Morse                C         NEIGH_RVEC_H    Iterator   Half        YES
 - based on model_driver_P_Morse             NEIGH_PURE_H    Locator    Full
                                             NEIGH_RVEC_F
                                             NEIGH_PURE_F
                                             MI_OPBC_H
                                             MI_OPBC_F
                                             CLUSTER

ex_model_Cu_PF_Johnson             F03       NEIGH_RVEC_H    Iterator   Half        NO
                                             NEIGH_PURE_H    Locator    Full
                                             NEIGH_RVEC_F
                                             NEIGH_PURE_F
                                             MI_OPBC_H
                                             MI_OPBC_F
                                             CLUSTER

ex_model_Ne_P_fastLJ               C         NEIGH_PURE_H    Iterator   Half        YES
                                             NEIGH_PURE_F               Full
                                             NEIGH_RVEC_F
                                             MI_OPBC_H
                                             MI_OPBC_F
                                             CLUSTER

ex_model_Ne_P_LJ                   F03       NEIGH_RVEC_H    Iterator   Half        YES
 - based on model_driver_P_LJ                NEIGH_PURE_H    Locator    Full
                                             NEIGH_RVEC_F
                                             NEIGH_PURE_F
                                             MI_OPBC_H
                                             MI_OPBC_F
                                             CLUSTER

ex_model_Ne_P_LJ_NEIGH_PURE_H      F77       NEIGH_PURE_H    Iterator   Half        NO

ex_model_Ne_P_MLJ_NEIGH_RVEC_H     C         NEIGH_RVEC_H    Iterator   Half        YES

ex_model_Ne_P_Morse                C         NEIGH_RVEC_H    Iterator   Half        YES
 - based on model_driver_P_Morse             NEIGH_PURE_H    Locator    Full
                                             NEIGH_RVEC_F
                                             NEIGH_PURE_F
                                             MI_OPBC_H
                                             MI_OPBC_F
                                             CLUSTER
---------------------------------------------------------------------------------------------

***  Description of the example Models  ***

A description of the provided example Models is given below.  The Models are,
roughly, listed in order of increasing complexity.  It is suggested that
examining the example Models in this order will provide a gradual introduction
to the various components of a KIM-compliant Model. (See the README file in the
docs directory for guidelines on how to study the Models distributed with this
package.)

ex_model_Ar_P_MLJ_CLUSTER_C   (C)
ex_model_Ar_P_MLJ_CLUSTER_F03 (Fortran 2003)
     These Models implement the CLUSTER neighbor list and boundary condition
     (NBC) method, which is the simplest computation to understand.  For this
     reason, looking at the compute() or Compute_Energy_Forces() subroutines,
     respectively, for this Model is a good place to get started when first
     trying to understand how a KIM-compliant Model works.  Note that these
     Models publish their parameters.  This means that they must also provide
     reinitialization and destroy routines in addition to the required
     initialization routine.  Examples of Models that do not publish parameters
     (which makes the initialization routine simpler) are described below.

ex_model_Ne_P_LJ_NEIGH_PURE_H (FORTRAN 77)
     This Model implements the NEIGH_PURE_H NBC method, which is slightly more
     complicated than the CLUSTER method.  The Model uses only Iterator mode
     for neighbor list access, which makes this Model a good place to study the
     details of the NEIGH_PURE_H method and Iterator mode.  This Model does not
     publish its parameters, which makes it easy to focus on the details of the
     calculate subroutine.

ex_model_Ar_P_MLJ_NEIGH_PURE_H_F (Fortran 2003)
     This Model implements both the NEIGH_PURE_H and NEIGH_PURE_F NBC methods,
     and supports both Iterator mode and Locator mode.  Thus, this Model makes
     it easy to identify the differences required for a computation when one
     uses half or full neighbor lists, as well as, Iterator or Locator neighbor
     list access modes.

ex_model_Ar_P_MLJ_NEIGH_RVEC_F (Fortran 2003)
ex_model_Ne_P_MLJ_NEIGH_RVEC_H (C)
     These two Models (the first written in F03, the second written in C)
     provide parallel examples of an implementation of the NEIGH_RVEC_F and
     NEIGH_RVEC_H NBC methods, respectively.  These NBC methods include
     relative position vectors (Rij's) as well as the usual neighbor list of
     particle Id's.

ex_model_Ar_P_MLJ_MI_OPBC_H_F (Fortran 2003)
     This Model implements the MI_OPBC_H and MI_OPBC_F NBC methods.  This is,
     arguably, the most complex method and requires that both the Simulator and
     Model apply the "minimum image" convention (using the `boxSideLengths'
     argument) to determine a particle's neighbors and the corresponding
     relative position vectors.

ex_model_ArNe_P_MLJ_NEIGH_RVEC_F (Fortran 2003)
     This Model is the same as ex_model_Ar_P_MLJ_NEIGH_RVEC_F except that it
     supports interactions between argon and neon particles.  Thus, it is
     useful to compare these two Models in order to see what changes are
     required for a KIM Model to support multiple species interactions.

ex_model_Ar_P_MLJ_C (C)
     This Model is based on the template file
     ${KD}/docs/templates/model_El_P_Template.c.  Thus, it is useful to
     compare the file ex_model_Ar_P_MLJ_C.c with
     ${KD}/docs/templates/model_El_P_Template.c to see the relatively few
     changes required to implement the modified Lennard-Jones model.  The
     template implements all NBCs and Iterator and Locator modes in a way that
     results in a very compact compute() function.

ex_model_Ar_P_MLJ_F03 (Fortran 2003)
     This Model is based on the template file
     ${KD}/docs/templates/model_El_P_Template.F03.  Thus, it is useful to
     compare the file ex_model_Ar_P_MLJ_F03.F03 with
     ${KD}/docs/templates/model_El_P_Template.F03 to see the relatively few
     changes required to implement the modified Lennard-Jones model.  The
     template implements all NBCs and Iterator and Locator modes in a way that
     results in a very compact Compute_Energy_Forces() subroutine.

ex_model_Al_PF_ErcolessiAdams (Fortran 2003)
     This Model is based on the template file
     ${KD}/docs/templates/model_El_PF_Template.F03.  Thus, it is useful to
     compare the file ex_model_Al_PF_ErcolessiAdams.F03 with
     ${KD}/docs/templates/model_El_PF_Template.F03 to see the relatively
     simple changes required to implement a pair functional Model.

ex_model_Cu_PF_Johnson (C)
     This Model is based on the template file
     ${KD}/docs/templates/model_El_PF_Template.c.  Thus, it is useful to
     compare the file ex_model_Cu_PF_Johnson.c with
     ${KD}/docs/templates/model_El_PF_Template.c to see the relatively
     simple changes required to implement a pair functional Model.

ex_model_Ar_P_LJ (F03)
ex_model_Ne_P_LJ (F03)
     These Models are based on the KIM Model Driver model_driver_P_LJ.  They
     only consist of a simple Makefile and a parameters file.  Everything else
     is handled by the KIM Model Driver.  See the directory
     ${KD}/examples/model_drivers/model_driver_P_LJ/ for more details on how
     KIM Model Drivers are handled.

ex_model_Ar_P_Morse (C)
ex_model_Ne_P_Morse (C)
     These Models are based on the KIM Model Driver model_driver_P_Morse.  They
     only consist of a simple Makefile and a parameters file.  Everything else
     is handled by the KIM Model Driver.  See the directory
     ${KD}/examples/model_drivers/model_driver_P_Morse/ for more details on how
     KIM Model Drivers are handled.

ex_model_Ne_P_fastLJ (C)
     This Model implements the shifted Lennard-Jones Model in an attempt to be
     as efficient as possible.  The code can be compared to that of
     ex_model_Ar_P_MLJ_C.c or ex_model_driver_P_Morse.c.  This is a good
     example of how significant performance gains can be made, but often at the
     expense of source code readability.
