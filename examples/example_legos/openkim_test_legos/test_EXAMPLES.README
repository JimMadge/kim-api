#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2016, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#    Ellad B. Tadmor
#    Valeriu Smirichinski
#

#
# Release: This file is part of the kim-api.git repository.
#


This file contains a table of information about the example OpenKIM Tests
provided with this release of the KIM API package.

***  List of the example Tests  ***

Test name                                  Language  NBC             Loca/Iter  Half/Full
-----------------------------------------------------------------------------------------

ex_test_Al_FCCcohesive_MI_OPBC             F03       MI_OPBC_H       Locator    Half
                                                     MI_OPBC_F       Iterator   Full

ex_test_Al_free_cluster                    F03       NEIGH_RVEC_H    Locator    Full
                                                     NEIGH_PURE_H    Iterator   Half
                                                     NEIGH_RVEC_F
                                                     NEIGH_PURE_F
                                                     MI_OPBC_H
                                                     MI_OPBC_F
                                                     CLUSTER

ex_test_ArNe_periodic_B2_NEIGH_RVEC        F03       NEIGH_RVEC_H    Locator    Full
                                                     NEIGH_RVEC_F    Iterator

ex_test_Ar_FCCcohesiveCutoff_NEIGH_RVEC    F03       NEIGH_RVEC_H    Locator    Full
                                                     NEIGH_RVEC_F    Iterator

ex_test_Ar_FCCcohesive_MI_OPBC             F03       MI_OPBC_H       Locator    Half
                                                     MI_OPBC_F       Iterator   Full

ex_test_Ar_FCCcohesive_NEIGH_PURE          F03       NEIGH_PURE_H    Locator    Half
                                                     NEIGH_PURE_F    Iterator   Full

ex_test_Ar_FCCcohesive_NEIGH_RVEC          F03       NEIGH_RVEC_H    Locator    Full
                                                     NEIGH_RVEC_F    Iterator

ex_test_Ar_free_cluster                    F03       NEIGH_RVEC_H    Locator    Full
                                                     NEIGH_PURE_H    Iterator   Half
                                                     NEIGH_RVEC_F
                                                     NEIGH_PURE_F
                                                     MI_OPBC_H
                                                     MI_OPBC_F
                                                     CLUSTER

ex_test_Ar_free_cluster_CLUSTER_C          C         CLUSTER         N/A        N/A

ex_test_Ar_free_cluster_CLUSTER_F03        F03       CLUSTER         N/A        N/A

ex_test_Ar_free_cluster_CLUSTER_memory_F03 F03       CLUSTER         N/A        N/A

ex_test_Ar_multiple_models                 C         NEIGH_RVEC_H    Locator    Full
                                                     NEIGH_RVEC_F    Iterator

ex_test_Cu_free_cluster                    F03       NEIGH_RVEC_H    Locator    Full
                                                     NEIGH_PURE_H    Iterator   Half
                                                     NEIGH_RVEC_F
                                                     NEIGH_PURE_F
                                                     MI_OPBC_H
                                                     MI_OPBC_F
                                                     CLUSTER

ex_test_Ne_free_cluster                    F03       NEIGH_RVEC_H    Locator    Full
                                                     NEIGH_PURE_H    Iterator   Half
                                                     NEIGH_RVEC_F
                                                     NEIGH_PURE_F
                                                     MI_OPBC_H
                                                     MI_OPBC_F
                                                     CLUSTER

ex_test_Ne_free_cluster_SI                 F03       NEIGH_RVEC_H    Locator    Full
                                                     NEIGH_PURE_H    Iterator   Half
                                                     NEIGH_RVEC_F
                                                     NEIGH_PURE_F
                                                     MI_OPBC_H
                                                     MI_OPBC_F
                                                     CLUSTER

ex_test_Ne_free_cluster_stiff              F03       NEIGH_RVEC_H    Locator    Full
                                                     NEIGH_PURE_H    Iterator   Half
                                                     NEIGH_RVEC_F
                                                     NEIGH_PURE_F
                                                     MI_OPBC_H
                                                     MI_OPBC_F
                                                     CLUSTER
-----------------------------------------------------------------------------------------


***  Example Test/Model compatibility  ***


ex_test_Al_FCCcohesive_MI_OPBC
   |
   |-- ex_model_Al_PF_ErcolessiAdams
   |


ex_test_Al_free_cluster
   |
   |-- ex_model_Al_PF_ErcolessiAdams
   |


ex_test_ArNe_B2cohesive_NEIGH_RVEC
   |
   |-- ex_model_ArNe_P_MLJ_NEIGH_RVEC_F
   |


ex_test_Ar_FCCcohesiveCutoff_NEIGH_RVEC
   |
   |-- ex_model_ArNe_P_MLJ_NEIGH_RVEC_F
   |-- ex_model_Ar_P_LJ
   |-- ex_model_Ar_P_MLJ_NEIGH_RVEC_F
   |-- ex_model_Ar_P_Morse
   |


ex_test_Ar_FCCcohesive_MI_OPBC
   |
   |-- ex_model_Ar_P_LJ
   |-- ex_model_Ar_P_MLJ_C
   |-- ex_model_Ar_P_MLJ_F03
   |-- ex_model_Ar_P_MLJ_MI_OPBC_H_F
   |-- ex_model_Ar_P_Morse
   |


ex_test_Ar_FCCcohesive_NEIGH_PURE
   |
   |-- ex_model_Ar_P_LJ
   |-- ex_model_Ar_P_MLJ_C
   |-- ex_model_Ar_P_MLJ_F03
   |-- ex_model_Ar_P_MLJ_NEIGH_PURE_H_F
   |-- ex_model_Ar_P_Morse
   |


ex_test_Ar_FCCcohesive_NEIGH_RVEC
   |
   |-- ex_model_ArNe_P_MLJ_NEIGH_RVEC_F
   |-- ex_model_Ar_P_LJ
   |-- ex_model_Ar_P_MLJ_C
   |-- ex_model_Ar_P_MLJ_F03
   |-- ex_model_Ar_P_MLJ_NEIGH_RVEC_F
   |-- ex_model_Ar_P_Morse
   |


ex_test_Ar_free_cluster
   |
   |-- ex_model_ArNe_P_MLJ_NEIGH_RVEC_F
   |-- ex_model_Ar_P_LJ
   |-- ex_model_Ar_P_MLJ_C
   |-- ex_model_Ar_P_MLJ_CLUSTER_C
   |-- ex_model_Ar_P_MLJ_CLUSTER_F03
   |-- ex_model_Ar_P_MLJ_F03
   |-- ex_model_Ar_P_MLJ_MI_OPBC_H_F
   |-- ex_model_Ar_P_MLJ_NEIGH_PURE_H_F
   |-- ex_model_Ar_P_MLJ_NEIGH_RVEC_F
   |-- ex_model_Ar_P_Morse
   |


ex_test_Ar_free_cluster_CLUSTER_C
   |
   |-- ex_model_Ar_P_LJ
   |-- ex_model_Ar_P_MLJ_C
   |-- ex_model_Ar_P_MLJ_F03
   |-- ex_model_Ar_P_MLJ_CLUSTER_C
   |-- ex_model_Ar_P_MLJ_CLUSTER_F03
   |-- ex_model_Ar_P_Morse
   |


ex_test_Ar_free_cluster_CLUSTER_F03
   |
   |-- ex_model_Ar_P_LJ
   |-- ex_model_Ar_P_MLJ_C
   |-- ex_model_Ar_P_MLJ_F03
   |-- ex_model_Ar_P_MLJ_CLUSTER_C
   |-- ex_model_Ar_P_MLJ_CLUSTER_F03
   |-- ex_model_Ar_P_Morse
   |


ex_test_Ar_free_cluster_CLUSTER_memory_F03
   |
   |-- ex_model_Ar_P_LJ
   |-- ex_model_Ar_P_MLJ_C
   |-- ex_model_Ar_P_MLJ_F03
   |-- ex_model_Ar_P_MLJ_CLUSTER_C
   |-- ex_model_Ar_P_MLJ_CLUSTER_F03
   |-- ex_model_Ar_P_Morse
   |


ex_test_Ar_multiple_models
   |
   |-- ex_model_ArNe_P_MLJ_NEIGH_RVEC_F
   |-- ex_model_Ar_P_LJ
   |-- ex_model_Ar_P_MLJ_C
   |-- ex_model_Ar_P_MLJ_F03
   |-- ex_model_Ar_P_MLJ_NEIGH_RVEC_F
   |-- ex_model_Ar_P_Morse
   |


ex_test_Cu_free_cluster
   |
   |-- ex_model_Cu_PF_Johnson


ex_test_Ne_free_cluster
   |
   |-- ex_model_ArNe_P_MLJ_NEIGH_RVEC_F
   |-- ex_model_Ne_P_fastLJ
   |-- ex_model_Ne_P_LJ
   |-- ex_model_Ne_P_MLJ_NEIGH_RVEC_H
   |-- ex_model_Ne_P_Morse
   |


ex_test_Ne_free_cluster_SI
   |
   |-- ex_model_Ne_P_fastLJ
   |-- ex_model_Ne_P_LJ
   |-- ex_model_Ne_P_Morse
   |


ex_test_Ne_free_cluster_stiff
   |
   |-- ex_model_Ne_P_LJ
   |-- ex_model_Ne_P_Morse
   |

----------------------------------------------------------------------------------------


***  Description of the example Tests  ***

A description of the provided example OpenKIM Tests is given below.  The Tests
are, roughly, listed in order of increasing complexity.  It is suggested that
examining the example Tests in this order will provide a gradual introduction
to the various components of a KIM-compliant Test.  (See the README file in the
docs directory for guidelines on how to study the Tests distributed with this
package.)


ex_test_Ar_free_cluster_CLUSTER_C   (C)
ex_test_Ar_free_cluster_CLUSTER_F03 (Fortran 2003)
ex_test_Ar_free_cluster_CLUSTER_memory_F03 (Fortran 2003)
     These Tests are the simplest examples.  Thus, they provide the best
     introduction to the basic steps required for a Test to setup and interact
     with a KIM Model.  They setup a KIM API object for the user's requested
     KIM Model (which must support the CLUSTER neighbor list and boundary
     condition (NBC) method), create a cluster of 63 particles with positions
     corresponding to a 2x2x2 FCC cubic cell, and compute the total energy and
     force components on each particle.  The results are printed to the screen.
     The only difference between these Tests is that one is written in C and
     two are written in Fortran 2003.  The difference between the two F03 codes
     is that one uses the KIM API to allocate memory and the other
     (*_memory_F03) manages the memory on its own.


ex_test_Al_free_cluster    (Fortran 2003)
ex_test_Ar_free_cluster    (Fortran 2003)
ex_test_Cu_free_cluster    (Fortran 2003)
ex_test_Ne_free_cluster    (Fortran 2003)
ex_test_Ne_free_cluster_SI (Fortran 2003)
     These Tests, all written in Fortran 2003, are identical except for the
     atomic species they support.  Thus, it is interesting to compare them to
     see the minor changes needed to support different species.  The Tests do
     exactly the same computation as that performed by the
     ex_test_Ar_free_cluster_CLUSTER_* Tests.  However, in addition to the
     CLUSTER NBC method, these Tests implement support for all the other NBC
     methods.  This entails creating neighbor lists for the various NBC
     methods, and makes these Tests a good place to begin to understand the
     differences between these NBC methods.  (The _SI variant uses the SI unit
     system and is therefore only compatible with the example ex_model_drivers
     which implement `flexible' unit handling.)


ex_test_Ne_free_cluster_stiff (Fortran 2003)
     This Test, written in Fortran 2003, is identical to the
     ex_test_*_free_cluster Tests except that is also computes the hessian
     matrix.


ex_test_Al_FCCcohesive_MI_OPBC (Fortran 2003)
ex_test_Ar_FCCcohesive_MI_OPBC (Fortran 2003)
     These Tests, both written in Fortran 2003, use the MI_OPBC_H or MI_OPBC_F
     NBC method to compute the relaxed cohesive energy of an infinite perfect
     FCC crystal.  The computation method is tailored specifically to the
     MI_OPBC_[H|F] methods in order to perform the computation in the most
     computationally efficient manner.  The Tests use the Golden section search
     method to find the relaxed FCC lattice parameter.


ex_test_Ar_FCCcohesive_NEIGH_PURE (Fortran 2003)
     This Test, written in Fortran 2003, uses the NEIGH_PURE_H or NEIGH_PURE_F
     NBC method to compute the relaxed cohesive energy of an infinite perfect
     FCC crystal.  The computation method is tailored specifically to the
     NEIGH_PURE_[H|F] methods in order to perform the computation in the most
     computationally efficient manner.  The Test uses the Golden section search
     method to find the relaxed FCC lattice parameter.


ex_test_Ar_FCCcohesive_NEIGH_RVEC (Fortran 2003)
     This Test, written in Fortran 2003, uses the NEIGH_RVEC_H or NEIGH_RVEC_F
     NBC method to compute the relaxed cohesive energy of an infinite perfect
     FCC crystal.  The computation method is tailored specifically to the
     NEIGH_RVEC_[H|F] methods in order to perform the computation in the most
     computationally efficient manner.  The Test uses the Golden section search
     method to find the relaxed FCC lattice parameter.


ex_test_ArNe_B2cohesive_NEIGH_RVEC (Fortran 2003)
     This Test, written in Fortran 2003, uses the NEIGH_RVEC_H or NEIGH_RVEC_F
     NBC method to compute the relaxed cohesive energy of an infinite perfect
     B2 (CsCl-type) crystal.  The computation method is tailored specifically
     to the NEIGH_RVEC_[H|F] methods in order to perform the computation in the
     most computationally efficient manner.  The Test uses the Golden section
     search method to find the relaxed B2 lattice parameter.  It is useful to
     compare this Test with the ex_test_Ar_FCCcohesive_NEIGH_RVEC Test to see
     the changes that are required to work with multiple species.


ex_test_Ar_FCCcohesiveCutoff_NEIGH_RVEC (Fortran 2003)
     This Test, written in Fortran 2003, uses the NEIGH_RVEC_H or NEIGH_RVEC_F
     NBC method to compute the relaxed cohesive energy of an infinite perfect
     FCC crystal for five different values of the Model's `cutoff' parameter.
     The Test only works with Models that publish a `PARAM_FREE_cutoff'
     parameter, and thus, allow the Test to change their cutoff.  The
     computation method is tailored specifically to the NEIGH_RVEC_[H|F]
     methods in order to perform the computation in the most computationally
     efficient manner.  The Test uses the Golden section search method to find
     the relaxed FCC lattice parameter.  It is useful to compare this Test with
     the ex_test_Ar_FCCcohesive_NEIGH_RVEC Test to see the changes that are
     required for a Test to adjust a Model's parameters.


ex_test_Ar_multiple_models (C)
     This Test, written in C, is the most complex.  It performs all its own
     memory management (i.e., it does not use the KIM_API_allocate() library
     routine).  It also works with two different Models at the same time.
     Further, it performs two separate computations for each Model.  Thus, this
     test illustrates the simultaneous use of multiple KIM API objects for both
     the same Model and different Models.  The Test computes the energy for an
     FCC cluster and an infinite periodic FCC crystal for each Model and prints
     these energy values for a range of FCC lattice spacings.
