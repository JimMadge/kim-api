#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2017, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#

#
# Release: This file is part of the kim-api.git repository.
#


# sanity checks
ifndef KIM_DIR
   $(error Make variable KIM_DIR must be defined)
endif
include $(KIM_DIR)/$(builddir)/Makefile.SanityCheck

# Set include flags
KIMINCLUDEFLAGS = -I$(includedir)/$(full_package_name)

# Clean up variables
MODEL_NAME := $(strip $(MODEL_NAME))
MODEL_DRIVER_NAME := $(strip $(MODEL_DRIVER_NAME))

MODEL_BUILD_TARGET := lib$(MODEL_LIB).so

#full lib name
MODEL_LIB_BUILD = $(LIB_ROOT)-model-v$(VERSION_FULL)

# Add this file and item makefile to makefiles list
KIM_MAKE_FILES += $(KIM_DIR)/$(builddir)/Makefile.ParameterizedModel Makefile

.PHONY: clean install-system install-user installdirs uninstall-system uninstall-user kim-item-type model-name model-driver-name

# descriptor file make rule
.INTERMEDIATE: kim_str.c
kim_str.c: descriptor.kim $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
	$(QUELL)varnm=`printf "descriptor.kim" | \
                       sed -e 's/^\([[:digit:]]\)/__\1/' -e 's/[^[:alnum:]]/_/g'` && \
                xxd -i descriptor.kim | \
                sed -e "s/$${varnm}/$(MODEL_NAME)_kim_str/g" > $@


all: descriptor.kim $(MODEL_BUILD_TARGET)

# Find the driver files
COLLECTIONS_INFO = $(libexecdir)/$(full_package_name)/$(full_package_name)-collections-info
#
driver_location = $(shell $(COLLECTIONS_INFO) model_drivers find $(MODEL_DRIVER_NAME) 2> /dev/null| sed -e 's/[^ ]* [^ ]* \([^ ]*\).*/\1/')
ifeq (,$(driver_location))
   ifeq (,$(MAKECMDGOALS))  # empty goal, in this case, means stop here
      MAKECMDGOALS=empty-so-stop
   endif
   ifeq (,$(filter-out clean kim-item-type model-name model-driver-name,$(MAKECMDGOALS)))
      # all good
   else
     # check for driver in CWD-collection of parent directory
     driver_location = $(shell cd ..; $(COLLECTIONS_INFO) model_drivers find $(MODEL_DRIVER_NAME) 2> /dev/null| sed -e 's/[^ ]* [^ ]* \([^ ]*\).*/\1/')
     ifeq (,$(driver_location))
       $(error Model Driver, $(MODEL_DRIVER_NAME), not found. Please build and install the driver)
     else
       # driver_location will have ./ at beginning, change it to ../
       driver_location:=.$(driver_location)
     endif
  endif
else
  driver_collection = $(shell $(COLLECTIONS_INFO) model_drivers find $(MODEL_DRIVER_NAME) 2> /dev/null| sed -e 's/\([^ ]*\).*/\1/')
endif

species_list = $(sort $(strip $(filter SPECIES_%_NAME,$(.VARIABLES))))
paramfile_list =  $(sort $(strip $(filter PARAM_FILE_%_NAME,$(.VARIABLES))))

paramfile_num_list = $(strip $(subst _NAME,,$(subst PARAM_FILE_,,$(paramfile_list))))
paramfile_name_list = $(strip $(foreach paramfl,$(paramfile_list), $($(paramfl))))
num_paramfiles = $(words $(paramfile_num_list))

# descriptor.kim should not be INTERMEDIATE, so that the openkim.org pipeline can use it.
drv_kim_name=$(driver_location)/$(MODEL_DRIVER_NAME)/$(shell $(MAKE) $(MAKE_FLAGS) -C $(driver_location)/$(MODEL_DRIVER_NAME) model-driver-kim-file-template 2> /dev/null)
descriptor.kim: $(drv_kim_name) $(KIM_MAKE_FILES)
	@printf "Creating... $@.\n"
	@printf "  Using ModelDriver in... $(driver_location)/$(MODEL_DRIVER_NAME).\n"
	$(QUELL)$(foreach spec,$(filter-out $(shell cat $(drv_kim_name) | \
                                                    sed -e '/^SPECIES_\([0-9]\{3\}\)_NAME_STR.*$$/!d' -e 's/^\(SPECIES_[0-9]\{3\}_NAME\)_STR.*$$/\1/'), \
                                            $(species_list)),\
                    printf "*** $(spec) is defined in Makefile, but $(spec)_STR is not in $(drv_kim_name). ***\n\n" && false;)
	$(QUELL)cat $(drv_kim_name) | \
                sed $(foreach spec,$(species_list),-e 's,$(spec)_STR,$($(spec)),g')    \
                    -e '/SPECIES_[0-9]\{3\}_NAME_STR/d'                                \
                > descriptor.kim

PARAM_MODEL_NAME = parameterized-model
$(PARAM_MODEL_NAME).o: KIMDEFINES = -D KIM_LINK_VALUE=$(KIM_LINK_VALUE)
.INTERMEDIATE: $(PARAM_MODEL_NAME).cpp
$(PARAM_MODEL_NAME).cpp: $(KIM_DIR)/$(builddir)/parameterized_model.cpp $(paramfile_name_list) $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
	@printf "  Using ModelDriver in... $(driver_location)/$(MODEL_DRIVER_NAME).\n"
	$(QUELL)cat /dev/null > $@
	$(QUELL)$(foreach flnum,$(paramfile_num_list),\
            fl_name=$(PARAM_FILE_$(flnum)_NAME);\
            varnm=`printf "$${fl_name}" | \
                       sed -e 's/^\([[:digit:]]\)/__\1/' -e 's/[^[:alnum:]]/_/g'` && \
                xxd -i $${fl_name} | \
                sed -e "s/$${varnm}/paramfile_$(flnum)/g" >> $@; \
         )
        # make sed script
	$(QUELL)printf "/PARAMFILE_POINTERS_GO_HERE;/ {\n" > tmp-sed-script
	$(QUELL)$(foreach flnum,$(paramfile_num_list),printf 'i\\\n' >> tmp-sed-script; printf "   paramfile_strings[$(flnum)-1] = paramfile_$(flnum);\n" >> tmp-sed-script;)
	$(QUELL)printf "d\n" >> tmp-sed-script
	$(QUELL)printf "}\n" >> tmp-sed-script
	$(QUELL)printf "/PARAMFILE_LENS_GO_HERE;/ {\n" >> tmp-sed-script
	$(QUELL)$(foreach flnum,$(paramfile_num_list),printf 'i\\\n' >> tmp-sed-script; printf "   paramfile_strings_len[$(flnum)-1] = paramfile_$(flnum)_len;\n" >> tmp-sed-script;)
	$(QUELL)printf "d\n" >> tmp-sed-script
	$(QUELL)printf "}\n" >> tmp-sed-script
        # create actual model code to call model driver
	$(QUELL)cat $(KIM_DIR)/$(builddir)/parameterized_model.cpp |                         \
                sed -e "s,MODEL_DRIVER_NAME_STR,$(MODEL_DRIVER_NAME),g"                      \
                    -e "s,MODEL_DRIVER_LIBNAME_STR,lib$(MODEL_DRIVER_LIB),g"                 \
                    -e "s,MODEL_NAME_STR,$(MODEL_NAME),g"                                    \
                    -e "s,VERSION_FULL_STR,$(VERSION_FULL),g"                                \
                    -e "s,NUM_PARAMFILES,$(num_paramfiles),g"                                \
                    -f tmp-sed-script                                                  >> $@
	$(QUELL)rm -f tmp-sed-script

lib$(MODEL_LIB).a: lib$(MODEL_LIB_BUILD).a
	@printf "Creating... $@.\n"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).a" "lib$(MODEL_LIB).a"

lib$(MODEL_LIB).so: lib$(MODEL_LIB_BUILD).so
	@printf "Creating... $@.\n"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).so" "lib$(MODEL_LIB).so"

lib$(MODEL_LIB_BUILD).a: $(PARAM_MODEL_NAME).o kim_str.o
	@printf "Creating... $@.\n"
	$(QUELL)ar rcs $@ $(PARAM_MODEL_NAME).o kim_str.o

lib$(MODEL_LIB_BUILD).so: lib$(MODEL_LIB_BUILD).a $(EXPORT_LIST_NAME)
	@printf "Creating... $@.\n"
	$(QUELL)$(LD) $(ARCHFLAG) $(LDSHAREDFLAG) \
                      $(LDEXPORTLISTFLAG) $(LDFLAGS) -L$(libdir) $(OUTPUTINFLAG) lib$(MODEL_LIB_BUILD).so \
                      $(LDWHOLEARCHIVESTARTFLAG) $< $(LDWHOLEARCHIVEENDFLAG) $(LDLIBS) -l$(KIM_LIB)

$(EXPORT_LIST_NAME): $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
ifeq (darwin, $(KIM_SYSTEMLINKER))
	$(QUELL)printf "_kim_item_type\n"                          > $@
	$(QUELL)printf "_$(MODEL_NAME)_init_pointer\n"            >> $@
	$(QUELL)printf "_$(MODEL_NAME)_kim_str\n"                 >> $@
	$(QUELL)printf "_$(MODEL_NAME)_kim_str_len\n"             >> $@
	$(QUELL)printf "_$(MODEL_NAME)_compiled_with_version\n"   >> $@
else # everything else (linux and freebsd)
	$(QUELL)printf "{\n"                                                > $@
	$(QUELL)printf "   global:\n"                                       >> $@
	$(QUELL)printf "           kim_item_type;\n"                        >> $@
	$(QUELL)printf "           $(MODEL_NAME)_init_pointer;\n"           >> $@
	$(QUELL)printf "           $(MODEL_NAME)_kim_str;\n"                >> $@
	$(QUELL)printf "           $(MODEL_NAME)_kim_str_len;\n"            >> $@
	$(QUELL)printf "           $(MODEL_NAME)_compiled_with_version;\n"  >> $@
	$(QUELL)printf "\n"                                                 >> $@
	$(QUELL)printf "   local: *;\n"                                     >> $@
	$(QUELL)printf "};\n"                                               >> $@
endif

kim-item-type:
	@printf "ParameterizedModel"

model-name:
	@printf "$(MODEL_NAME)"

model-driver-name:
	@printf "$(MODEL_DRIVER_NAME)"

clean:
	@printf "Cleaning... Model.......... $(MODEL_NAME).\n"
	$(QUELL)rm -f lib$(LIB_ROOT)* \
                      $(addprefix $(PARAM_MODEL_NAME).,o cpp) \
                      $(addprefix kim_str.,o c) \
                      $(EXPORT_LIST_NAME) descriptor.kim

installdirs:
	$(QUELL)fl="$(install_parammodeldir)" && \
                if test -d "$$fl"; then rm -rf "$$fl"; fi && \
                $(INSTALL_PROGRAM) -d -m 0755  "$$fl"

install-system: install_parammodeldir = $(shell $(COLLECTIONS_INFO) system models)/$(MODEL_NAME)
install-user:   install_parammodeldir = $(shell $(COLLECTIONS_INFO) config_file models)/$(MODEL_NAME)
install-system install-user: install-%: all installdirs
	@printf "Installing...($*)................. Model.......... $(MODEL_NAME).\n"
	$(QUELL)if test \( x"$*" = x"system" -a x"$(driver_collection)" = x"user" \); then                    \
                  printf "*******************************************************************************\n"; \
                  printf "*******   Model Driver found in user collection.  Cannot install this   *******\n"; \
                  printf "*******             Parameterized Model in system collection.           *******\n"; \
                  printf "*******                  Please try 'make install-user'.                *******\n"; \
                  printf "*******************************************************************************\n"; \
                  false; else true;                                                                           \
                fi
	$(QUELL)$(INSTALL_PROGRAM) -m 0755 "lib$(MODEL_LIB_BUILD).so" "$(install_parammodeldir)/lib$(MODEL_LIB_BUILD).so"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).so" "$(install_parammodeldir)/lib$(MODEL_LIB).so"

uninstall-system: uninstall_parammodeldir = $(shell $(COLLECTIONS_INFO) system models)/$(MODEL_NAME)
uninstall-user:   uninstall_parammodeldir = $(shell $(COLLECTIONS_INFO) config_file models)/$(MODEL_NAME)
uninstall-system uninstall-user: uninstall-%:
	@printf "Uninstalling...($*)................. Model.......... $(MODEL_NAME).\n"
	$(QUELL)fl="$(uninstall_parammodeldir)" && if test -d "$$fl"; then rm -rf "$$fl"; fi
