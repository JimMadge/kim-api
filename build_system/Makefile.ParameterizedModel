#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2017, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#

#
# Release: This file is part of the kim-api.git repository.
#


# sanity checks
ifndef KIM_DIR
   $(error Make variable KIM_DIR must be defined)
endif
include $(KIM_DIR)/$(builddir)/Makefile.SanityCheck

# Set include flags
KIMINCLUDEFLAGS = -I$(includedir)/$(full_package_name)

# Clean up variables
MODEL_NAME := $(strip $(MODEL_NAME))
MODEL_DRIVER_NAME := $(strip $(MODEL_DRIVER_NAME))

MODEL_BUILD_TARGET := lib$(MODEL_LIB).so

#full lib name
MODEL_LIB_BUILD = $(LIB_ROOT)-model-v$(VERSION_FULL)

# Add this file and item makefile to makefiles list
KIM_MAKE_FILES += $(KIM_DIR)/$(builddir)/Makefile.ParameterizedModel Makefile

.PHONY: clean install-system install-user installdirs uninstall-system uninstall-user kim-item-type model-name model-driver-name

all: $(MODEL_BUILD_TARGET)

paramfile_list =  $(sort $(strip $(filter PARAM_FILE_%_NAME,$(.VARIABLES))))

paramfile_num_list = $(strip $(subst _NAME,,$(subst PARAM_FILE_,,$(paramfile_list))))
paramfile_name_list = $(strip $(foreach paramfl,$(paramfile_list), $($(paramfl))))
num_paramfiles = $(words $(paramfile_num_list))

.INTERMEDIATE: init_wrapper.cpp
init_wrapper.cpp: $(paramfile_name_list) $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
	$(QUELL)printf "extern \"C\"\n"                                                    > $@
	$(QUELL)printf "{\n"                                                              >> $@
	$(QUELL)printf "int number_of_parameter_files = $(num_paramfiles);\n"             >> $@
	$(QUELL)$(foreach flnum,$(paramfile_num_list),\
            fl_num=`printf $(flnum) | sed -e "s/^0*//"`;\
            fl_name=$(PARAM_FILE_$(flnum)_NAME);\
            varnm=`printf "$${fl_name}" | \
                       sed -e 's/^\([[:digit:]]\)/__\1/' -e 's/[^[:alnum:]]/_/g'` && \
                xxd -i $${fl_name} | \
                sed -e "s/$${varnm}/parameter_file_$${fl_num}/g" >> $@; \
         )
	$(QUELL)printf "\n\n"                                                             >> $@
	$(QUELL)printf "char kim_item_type[] = \"parameterized-model\";\n"                >> $@
	$(QUELL)printf "int (* $(strip $(MODEL_NAME))_create_pointer)() = 0;\n"           >> $@
	$(QUELL)printf "char $(strip $(MODEL_NAME))_compiled_with_version[]\n"            >> $@
	$(QUELL)printf "  = \"$(VERSION_FULL)\";\n"                                       >> $@
	$(QUELL)printf "char $(strip $(MODEL_NAME))_language[] = \"cpp\";\n"              >> $@
	$(QUELL)printf "char $(strip $(MODEL_NAME))_driver_name[]\n"                      >> $@
	$(QUELL)printf "  = \"$(MODEL_DRIVER_NAME)\";\n"                                  >> $@
	$(QUELL)printf "}\n"                                                              >> $@

lib$(MODEL_LIB).a: lib$(MODEL_LIB_BUILD).a
	@printf "Creating... $@.\n"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).a" "lib$(MODEL_LIB).a"

lib$(MODEL_LIB).so: lib$(MODEL_LIB_BUILD).so
	@printf "Creating... $@.\n"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).so" "lib$(MODEL_LIB).so"

lib$(MODEL_LIB_BUILD).a: init_wrapper.o
	@printf "Creating... $@.\n"
	$(QUELL)ar rcs $@ init_wrapper.o

lib$(MODEL_LIB_BUILD).so: lib$(MODEL_LIB_BUILD).a $(EXPORT_LIST_NAME)
	@printf "Creating... $@.\n"
	$(QUELL)$(LD) $(ARCHFLAG) $(LDSHAREDFLAG) \
                      $(LDEXPORTLISTFLAG) $(LDFLAGS) -L$(libdir) $(OUTPUTINFLAG) lib$(MODEL_LIB_BUILD).so \
                      $(LDWHOLEARCHIVESTARTFLAG) $< $(LDWHOLEARCHIVEENDFLAG) $(LDLIBS) -l$(KIM_LIB)


$(EXPORT_LIST_NAME): $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
ifeq (darwin, $(KIM_SYSTEMLINKER))
	$(QUELL)printf "_number_of_parameter_files\n"                        > $@
	$(QUELL)$(foreach flnum,$(paramfile_num_list),\
            fl_num=`printf $(flnum) | sed -e "s/^0*//"`; \
            printf "_parameter_file_$${fl_num}\n" >> $@; \
            printf "_parameter_file_$${fl_num}_len\n" >> $@; \
         )
	$(QUELL)printf "_kim_item_type\n"                                   >> $@
	$(QUELL)printf "_$(MODEL_NAME)_create_pointer\n"                    >> $@
	$(QUELL)printf "_$(MODEL_NAME)_compiled_with_version\n"             >> $@
	$(QUELL)printf "_$(MODEL_NAME)_language\n"                          >> $@
	$(QUELL)printf "_$(MODEL_NAME)_driver_name\n"                       >> $@
else # everything else (linux and freebsd)
	$(QUELL)printf "{\n"                                                 > $@
	$(QUELL)printf "   global:\n"                                       >> $@
	$(QUELL)printf "           number_of_parameter_files;\n"            >> $@
	$(QUELL)$(foreach flnum,$(paramfile_num_list),\
            fl_num=`printf $(flnum) | sed -e "s/^0*//"`; \
            printf "parameter_file_$${fl_num};\n" >> $@; \
            printf "parameter_file_$${fl_num}_len ;\n" >> $@; \
         )
	$(QUELL)printf "           kim_item_type;\n"                        >> $@
	$(QUELL)printf "           $(MODEL_NAME)_create_pointer;\n"         >> $@
	$(QUELL)printf "           $(MODEL_NAME)_compiled_with_version;\n"  >> $@
	$(QUELL)printf "           $(MODEL_NAME)_language;\n"               >> $@
	$(QUELL)printf "           $(MODEL_NAME)_driver_name;\n"            >> $@
	$(QUELL)printf "\n"                                                 >> $@
	$(QUELL)printf "   local: *;\n"                                     >> $@
	$(QUELL)printf "};\n"                                               >> $@
endif

kim-item-type:
	@printf "ParameterizedModel"

model-name:
	@printf "$(MODEL_NAME)"

model-driver-name:
	@printf "$(MODEL_DRIVER_NAME)"

clean:
	@printf "Cleaning... Model.......... $(MODEL_NAME).\n"
	$(QUELL)rm -f lib$(LIB_ROOT)* \
                      $(addprefix init_wrapper.,o cpp) \
                      $(EXPORT_LIST_NAME)

installdirs:
	$(QUELL)fl="$(install_parammodeldir)" && \
                if test -d "$$fl"; then rm -rf "$$fl"; fi && \
                $(INSTALL_PROGRAM) -d -m 0755 "$$fl"

COLLECTIONS_INFO = $(libexecdir)/$(full_package_name)/$(full_package_name)-collections-info
SYSTEM_MODELS_DIR = $(shell $(COLLECTIONS_INFO) system models)
USER_MODELS_DIR = $(shell $(COLLECTIONS_INFO) config_file models)
ifeq ($(USER_MODELS_DIR),)
  $(error Invalid config file)
endif
install-system: install_parammodeldir = $(SYSTEM_MODELS_DIR)/$(MODEL_NAME)
install-user:   install_parammodeldir = $(USER_MODELS_DIR)/$(MODEL_NAME)
install-system install-user: install-%: all installdirs
	@printf "Installing...($*)................. Model.......... $(MODEL_NAME).\n"
	$(QUELL)if test \( x"$*" = x"system" -a x"$(driver_collection)" = x"user" \); then                    \
                  printf "*******************************************************************************\n"; \
                  printf "*******   Model Driver found in user collection.  Cannot install this   *******\n"; \
                  printf "*******             Parameterized Model in system collection.           *******\n"; \
                  printf "*******                  Please try 'make install-user'.                *******\n"; \
                  printf "*******************************************************************************\n"; \
                  false; else true;                                                                           \
                fi
	$(QUELL)$(INSTALL_PROGRAM) -m 0755 "lib$(MODEL_LIB_BUILD).so" "$(install_parammodeldir)/lib$(MODEL_LIB_BUILD).so"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).so" "$(install_parammodeldir)/lib$(MODEL_LIB).so"

uninstall-system: uninstall_parammodeldir = $(SYSTEM_MODELS_DIR)/$(MODEL_NAME)
uninstall-user:   uninstall_parammodeldir = $(USER_MODELS_DIR)/$(MODEL_NAME)
uninstall-system uninstall-user: uninstall-%:
	@printf "Uninstalling...($*)................. Model.......... $(MODEL_NAME).\n"
	$(QUELL)fl="$(uninstall_parammodeldir)" && if test -d "$$fl"; then rm -rf "$$fl"; fi
