#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2017, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#

#
# Release: This file is part of the kim-api.git repository.
#


# sanity checks
ifndef KIM_DIR
   $(error Make variable KIM_DIR must be defined)
endif
include $(KIM_DIR)/$(builddir)/Makefile.SanityCheck

# Clean up variables
MODEL_DRIVER_NAME := $(strip $(MODEL_DRIVER_NAME))
MODEL_DRIVER_CREATE_FUNCTION_NAME := $(strip $(MODEL_DRIVER_CREATE_FUNCTION_NAME))
MODEL_DRIVER_CREATE_FUNCTION_LANG := $(strip $(MODEL_DRIVER_CREATE_FUNCTION_LANG))
ifneq (,$(filter-out cpp c fortran,$(MODEL_DRIVER_CREATE_FUNCTION_LANG)))
   $(error Unknown MODEL_DRIVER_CREATE_FUNCTION_LANG value: $(MODEL_DRIVER_CREATE_FUNCTION_LANG))
endif

MODEL_DRIVER_BUILD_TARGET := lib$(MODEL_DRIVER_LIB).so

#full lib name
MODEL_DRIVER_LIB_BUILD = $(LIB_ROOT)-model-driver-v$(VERSION_FULL)

# Add this file and item makefile to makefiles list
KIM_MAKE_FILES += $(KIM_DIR)/$(builddir)/Makefile.ModelDriver Makefile

# define includes
KIMINCLUDEFLAGS = -I$(includedir)/$(full_package_name)

.PHONY: clean install-system install-user installdirs uninstall-system uninstall-user kim-item-type model-driver-name model-driver-kim-file-template

all: $(MODEL_DRIVER_BUILD_TARGET)

.INTERMEDIATE: init_wrapper.cpp
init_wrapper.cpp: $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
	$(QUELL)printf "extern \"C\"\n"                                                                                > $@
	$(QUELL)printf "{\n"                                                                                          >> $@
	$(QUELL)printf "char kim_item_type[] = \"model-driver\";\n"                                                   >> $@
	$(QUELL)printf "int $(strip $(MODEL_DRIVER_CREATE_FUNCTION_NAME))();\n"                                       >> $@
	$(QUELL)printf "int (* $(strip $(MODEL_DRIVER_NAME))_create_pointer)()\n"                                     >> $@
	$(QUELL)printf "  = $(strip $(MODEL_DRIVER_CREATE_FUNCTION_NAME));\n"                                         >> $@
	$(QUELL)printf "char $(strip $(MODEL_DRIVER_NAME))_compiled_with_version[]\n"                                 >> $@
	$(QUELL)printf "  = \"$(VERSION_FULL)\";\n"                                                                   >> $@
	$(QUELL)printf "char $(strip $(MODEL_DRIVER_NAME))_language[] = \"$(MODEL_DRIVER_CREATE_FUNCTION_LANG)\";\n"  >> $@
	$(QUELL)printf "}\n"                                                                                          >> $@

lib$(MODEL_DRIVER_LIB).a: lib$(MODEL_DRIVER_LIB_BUILD).a
	@printf "Creating... $@.\n"
	$(QUELL)ln -fs "lib$(MODEL_DRIVER_LIB_BUILD).a" "lib$(MODEL_DRIVER_LIB).a"

lib$(MODEL_DRIVER_LIB).so: lib$(MODEL_DRIVER_LIB_BUILD).so
	@printf "Creating... $@.\n"
	$(QUELL)ln -fs "lib$(MODEL_DRIVER_LIB_BUILD).so" "lib$(MODEL_DRIVER_LIB).so"

lib$(MODEL_DRIVER_LIB_BUILD).a: $(LOCALOBJ) init_wrapper.o
	@printf "Creating... $@.\n"
	$(QUELL)ar rcs $@ $(LOCALOBJ) init_wrapper.o

lib$(MODEL_DRIVER_LIB_BUILD).so: lib$(MODEL_DRIVER_LIB_BUILD).a $(EXPORT_LIST_NAME)
	@printf "Creating... $@.\n"
	$(QUELL)$(LD) $(ARCHFLAG) $(LDSHAREDFLAG) \
                      $(LDEXPORTLISTFLAG) $(LDFLAGS) -L$(libdir) $(OUTPUTINFLAG) lib$(MODEL_DRIVER_LIB_BUILD).so \
                      $(LDWHOLEARCHIVESTARTFLAG) $< $(LDWHOLEARCHIVEENDFLAG) $(LDLIBS) -l$(KIM_LIB)

$(EXPORT_LIST_NAME): $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
ifeq (darwin, $(KIM_SYSTEMLINKER))
	$(QUELL)printf "_kim_item_type\n"                                           > $@
	$(QUELL)printf "_$(MODEL_DRIVER_NAME)_create_pointer\n"                    >> $@
	$(QUELL)printf "_$(MODEL_DRIVER_NAME)_compiled_with_version\n"             >> $@
	$(QUELL)printf "_$(MODEL_DRIVER_NAME)_language\n"                          >> $@
else # everything else (linux and freebsd)
	$(QUELL)printf "{\n"                                                        > $@
	$(QUELL)printf "   global:\n"                                              >> $@
	$(QUELL)printf "           kim_item_type;\n"                               >> $@
	$(QUELL)printf "           $(MODEL_DRIVER_NAME)_create_pointer;\n"         >> $@
	$(QUELL)printf "           $(MODEL_DRIVER_NAME)_compiled_with_version;\n"  >> $@
	$(QUELL)printf "           $(MODEL_DRIVER_NAME)_language;\n"               >> $@
	$(QUELL)printf "\n"                                                        >> $@
	$(QUELL)printf "   local: *;\n"                                            >> $@
	$(QUELL)printf "};\n"                                                      >> $@
endif

kim-item-type:
	@printf "ModelDriver"

model-driver-name:
	@printf "$(MODEL_DRIVER_NAME)"

$(LOCALOBJ): $(KIM_MAKE_FILES)

clean:
	@printf "Cleaning... Model Driver... $(MODEL_DRIVER_NAME).\n"
	$(QUELL)rm -f $(LOCALOBJ) *.mod \
                      lib$(LIB_ROOT)* \
                      $(addprefix driver_init_wrapper.,o cpp) \
                      $(EXPORT_LIST_NAME) $(LOCALCLEAN)

installdirs:
	$(QUELL)fl="$(install_modeldriverdir)" && \
                if test -d "$$fl"; then rm -rf "$$fl"; fi && \
                $(INSTALL_PROGRAM) -d -m 0755 "$$fl"

COLLECTIONS_INFO = $(libexecdir)/$(full_package_name)/$(full_package_name)-collections-info
install-system: install_modeldriverdir = $(shell $(COLLECTIONS_INFO) system model_drivers)/$(MODEL_DRIVER_NAME)
install-user:   install_modeldriverdir = $(shell $(COLLECTIONS_INFO) config_file model_drivers)/$(MODEL_DRIVER_NAME)
install-system install-user: install-%: all installdirs
	@printf "Installing...($*)................. Model Driver... $(MODEL_DRIVER_NAME).\n"
        # Install lib files
	$(QUELL)$(INSTALL_PROGRAM) -m 0755 "lib$(MODEL_DRIVER_LIB_BUILD).so" "$(install_modeldriverdir)/lib$(MODEL_DRIVER_LIB_BUILD).so"
	$(QUELL)ln -fs "lib$(MODEL_DRIVER_LIB_BUILD).so" "$(install_modeldriverdir)/lib$(MODEL_DRIVER_LIB).so"
        # Install kim files
	$(QUELL)$(INSTALL_PROGRAM) -m 0644 "$(MODEL_DRIVER_KIM_FILE_TEMPLATE)" "$(install_modeldriverdir)/$(MODEL_DRIVER_KIM_FILE_TEMPLATE)"
	$(QUELL)printf "# This file is automatically generated by the KIM API build system.\n"    > $(install_modeldriverdir)/Makefile; \
                printf "# Do not edit!\n"                                                        >> $(install_modeldriverdir)/Makefile; \
                printf "\n"                                                                      >> $(install_modeldriverdir)/Makefile; \
                printf "MODEL_DRIVER_KIM_FILE_TEMPLATE := $(MODEL_DRIVER_KIM_FILE_TEMPLATE)\n"   >> $(install_modeldriverdir)/Makefile; \
                printf "\n"                                                                      >> $(install_modeldriverdir)/Makefile; \
                printf ".PHONY: model-driver-kim-file-template\n"                                >> $(install_modeldriverdir)/Makefile; \
                printf "model-driver-kim-file-template:\n"                                       >> $(install_modeldriverdir)/Makefile; \
                printf "	@printf '\$$(MODEL_DRIVER_KIM_FILE_TEMPLATE)'\n"                 >> $(install_modeldriverdir)/Makefile;

uninstall-system: uninstall_modeldriverdir = $(shell $(COLLECTIONS_INFO) system model_drivers)/$(MODEL_DRIVER_NAME)
uninstall-user:   uninstall_modeldriverdir = $(shell $(COLLECTIONS_INFO) config_file model_drivers)/$(MODEL_DRIVER_NAME)
uninstall-system uninstall-user: uninstall-%:
	@printf "Uninstalling...($*)................. Model Driver... $(MODEL_DRIVER_NAME).\n"
	$(QUELL)fl="$(uninstall_modeldriverdir)" && if test -d "$$fl"; then rm -rf "$$fl"; fi
