#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2015, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#

#
# Release: This file is part of the kim-api.git repository.
#


# sanity checks
ifndef KIM_DIR
   $(error Make variable KIM_DIR must be defined)
endif
include $(KIM_DIR)/$(builddir)/Makefile.SanityCheck

# Clean up variables
MODEL_DRIVER_NAME := $(strip $(MODEL_DRIVER_NAME))
MODEL_DRIVER_KIM_FILE_TEMPLATE := $(strip $(MODEL_DRIVER_KIM_FILE_TEMPLATE))
MODEL_DRIVER_INIT_FUNCTION_NAME := $(strip $(MODEL_DRIVER_INIT_FUNCTION_NAME))

# Set SO variables
%.so: SO_IS_MODEL:=
%.so: SO_IS_PARAMETERIZED:=

#build target .a or .so for models
MODEL_DRIVER_BUILD_TARGET := lib$(MODEL_DRIVER_LIB).a
ifneq ($(KIM_LINK),static-link)
   MODEL_DRIVER_BUILD_TARGET := $(patsubst %.a,%.so, $(MODEL_DRIVER_BUILD_TARGET))
else
   ifneq ("1","$(MAKELEVEL)")
     MODEL_DRIVER_BUILD_TARGET += STATIC_COMP_WARNING
   endif
endif

# Add this file and item makefile to makefiles list
KIM_MAKE_FILES += $(KIM_DIR)/$(builddir)/Makefile.ModelDriver Makefile

.PHONY: STATIC_COMP_WARNING clean install installdirs uninstall kim-item-type model-driver-name model-driver-kim-file-template
STATIC_COMP_WARNING:
	@printf '\n'; \
        printf '*******************************************************************************\n'; \
        printf '*******                  Compiling in static link mode                  *******\n'; \
        printf '*******            You probably want to execute make from the           *******\n'; \
        printf '*******                        $$KIM_DIR directory                       *******\n'; \
        printf '*******************************************************************************\n'; \

all: $(MODEL_DRIVER_BUILD_TARGET)

.INTERMEDIATE: driver_init_wrapper.cpp
driver_init_wrapper.cpp: $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
	$(QUELL)printf "extern \"C\"\n"                                                                                                                 > $@
	$(QUELL)printf "{\n"                                                                                                                           >> $@
	$(QUELL)printf "   int $(strip $(MODEL_DRIVER_INIT_FUNCTION_NAME))(void *kimmdl, char *paramfile_names, int *nmstrlen, int *numparamfiles);\n" >> $@
	$(QUELL)printf "   int (* $(strip $(MODEL_DRIVER_NAME))_init_pointer)(void*,\n"                                                                >> $@
	$(QUELL)printf "      char*, int*, int*) =\n"                                                                                                  >> $@
	$(QUELL)printf "      $(strip $(MODEL_DRIVER_INIT_FUNCTION_NAME));\n"                                                                          >> $@
	$(QUELL)printf "   char $(strip $(MODEL_DRIVER_NAME))_compiled_with_version[]\n"                                                               >> $@
	$(QUELL)printf "      = \"$(VERSION_FULL)\";\n"                                                                                                >> $@
	$(QUELL)printf "}\n"                                                                                                                           >> $@

lib$(MODEL_DRIVER_LIB).a: lib$(MODEL_DRIVER_LIB_BUILD).a
	@printf "Creating... $@.\n"
	$(QUELL)ln -fs "lib$(MODEL_DRIVER_LIB_BUILD).a" "lib$(MODEL_DRIVER_LIB).a"

lib$(MODEL_DRIVER_LIB).so: lib$(MODEL_DRIVER_LIB_BUILD).so
	@printf "Creating... $@.\n"
	$(QUELL)ln -fs "lib$(MODEL_DRIVER_LIB_BUILD).so" "lib$(MODEL_DRIVER_LIB).so"

lib$(MODEL_DRIVER_LIB_BUILD).a: $(LOCALOBJ) driver_init_wrapper.o
	@printf "Creating... $@.\n"
	$(QUELL)ar rcs $@ $(LOCALOBJ) driver_init_wrapper.o

$(EXPORT_LIST_NAME): $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
ifeq (darwin, $(KIM_SYSTEMLINKER))
	$(QUELL)printf "_$(MODEL_DRIVER_NAME)_init_pointer\n"                       > $@
	$(QUELL)printf "_$(MODEL_DRIVER_NAME)_compiled_with_version\n"             >> $@
else # everything else (linux and freebsd)
	$(QUELL)printf "{\n"                                                        > $@
	$(QUELL)printf "   global:\n"                                              >> $@
	$(QUELL)printf "           $(MODEL_DRIVER_NAME)_init_pointer;\n"           >> $@
	$(QUELL)printf "           $(MODEL_DRIVER_NAME)_compiled_with_version;\n"  >> $@
	$(QUELL)printf "\n"                                                        >> $@
	$(QUELL)printf "   local: *;\n"                                            >> $@
	$(QUELL)printf "};\n"                                                      >> $@
endif

kim-item-type:
	@printf "ModelDriver"

model-driver-name:
	@printf "$(MODEL_DRIVER_NAME)"

model-driver-kim-file-template:
	@printf "$(MODEL_DRIVER_KIM_FILE_TEMPLATE)"

$(LOCALOBJ): $(KIM_MAKE_FILES)

clean:
	@printf "Cleaning... Model Driver... $(MODEL_DRIVER_NAME).\n"
	$(QUELL)rm -f $(LOCALOBJ) *.mod \
                      lib$(LIB_ROOT)* .lib$(LIB_ROOT)* \
                      $(addprefix driver_init_wrapper.,o cpp) \
                      $(EXPORT_LIST_NAME) $(LOCALCLEAN)

install_modeldriverdir = $(dest_package_dir)/$(modeldriversdir)/$(MODEL_DRIVER_NAME)

installdirs:
ifneq (static-link,$(KIM_LINK))
	$(QUELL)fl="$(install_modeldriverdir)" && \
                if test -d "$$fl"; then rm -rf "$$fl"; fi && \
                $(INSTALL_PROGRAM) -d -m 0755 "$$fl"
endif

install: DOT:=$(shell if test -f ".lib$(MODEL_DRIVER_LIB_BUILD).so"; then printf "."; fi)
install: all installdirs
	@printf "Installing...($(dest_package_dir))................. Model Driver... $(MODEL_DRIVER_NAME)"
ifneq (static-link,$(KIM_LINK))
	@printf ".\n"
        # Install lib files
	$(QUELL)$(INSTALL_PROGRAM) -m 0755 "$(DOT)lib$(MODEL_DRIVER_LIB_BUILD).so" "$(install_modeldriverdir)/lib$(MODEL_DRIVER_LIB_BUILD).so"
	$(QUELL)ln -fs "lib$(MODEL_DRIVER_LIB_BUILD).so" "$(install_modeldriverdir)/lib$(MODEL_DRIVER_LIB).so"
        # Install kim files
  ifeq (dynamic-load,$(KIM_LINK))
	$(QUELL)$(INSTALL_PROGRAM) -m 0644 "$(MODEL_DRIVER_KIM_FILE_TEMPLATE)" "$(install_modeldriverdir)/$(MODEL_DRIVER_KIM_FILE_TEMPLATE)"
	$(QUELL)printf "# This file is automatically generated by the KIM API build system.\n"    > $(install_modeldriverdir)/Makefile; \
                printf "# Do not edit!\n"                                                        >> $(install_modeldriverdir)/Makefile; \
                printf "\n"                                                                      >> $(install_modeldriverdir)/Makefile; \
                printf "MODEL_DRIVER_KIM_FILE_TEMPLATE := $(MODEL_DRIVER_KIM_FILE_TEMPLATE)\n"   >> $(install_modeldriverdir)/Makefile; \
                printf "\n"                                                                      >> $(install_modeldriverdir)/Makefile; \
                printf ".PHONY: model-driver-kim-file-template\n"                                >> $(install_modeldriverdir)/Makefile; \
                printf "model-driver-kim-file-template:\n"                                       >> $(install_modeldriverdir)/Makefile; \
                printf "	@printf '\$$(MODEL_DRIVER_KIM_FILE_TEMPLATE)'\n"                 >> $(install_modeldriverdir)/Makefile;
  endif
else
	@printf ": nothing to be done for static-link.\n"
endif

uninstall:
	@printf "Uninstalling...($(dest_package_dir))................. Model Driver... $(MODEL_DRIVER_NAME)"
ifneq (static-link,$(KIM_LINK))
	@printf ".\n"
	$(QUELL)fl="$(install_modeldriversdir)" && if test -d "$$fl"; then rm -rf "$$fl"; fi
else
	@printf ": nothing to be done for static-link.\n"
endif
