#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2018, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#

#
# Release: This file is part of the kim-api.git repository.
#


# sanity checks
ifndef KIM_DIR
   $(error Make variable KIM_DIR must be defined)
endif
include $(KIM_DIR)/$(builddir)/Makefile.SanityCheck

# Clean up variables
MODEL_NAME := $(strip $(MODEL_NAME))

MODEL_BUILD_TARGET := lib$(MODEL_LIB).so

#full lib name
MODEL_LIB_BUILD = $(LIB_ROOT)-model-v$(VERSION_FULL)

# Add this file and item makefile to makefiles list
KIM_MAKE_FILES += $(KIM_DIR)/$(builddir)/Makefile.SimulatorModel Makefile

.PHONY: clean installdirs check-for-empty--environment-collection kim-item-type model-name
.PHONY: install-system install-user install-environment
.PHONY: uninstall-system uninstall-user uninstall-environment

all: $(MODEL_BUILD_TARGET)

ifndef METADATA_FILE_NAME
   $(error Make variable METADATA_FILE_NAME must be defined)
endif
METADATA_FILE_NAME := $(strip $(METADATA_FILE_NAME))

paramfile_list =  $(sort $(strip $(filter PARAM_FILE_%_NAME,$(.VARIABLES))))

paramfile_num_list = $(strip $(subst _NAME,,$(subst PARAM_FILE_,,$(paramfile_list))))
paramfile_name_list = $(strip $(foreach paramfl,$(paramfile_list), $($(paramfl))))
num_paramfiles = $(words $(paramfile_num_list))
paramfile_num_list_check = $(shell i=1; while test $$i -le $(num_paramfiles); do printf "$$i "; i=`expr $$i \+ 1`; done)

ifneq ($(strip $(paramfile_num_list)),$(strip $(paramfile_num_list_check)))
  $(error Parameter file list numbering must start from 1 (PARAM_FILE_1_NAME) and be sequential (1, 2, 3, ...))
endif

SIMULATOR_MODEL_NAME = simulator-model
.INTERMEDIATE: $(SIMULATOR_MODEL_NAME).cpp
$(SIMULATOR_MODEL_NAME).cpp: $(paramfile_name_list) $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
	$(QUELL)printf "extern \"C\"\n"                                                    > $@
	$(QUELL)printf "{\n"                                                              >> $@
	$(QUELL)printf "int number_of_parameter_files = $(num_paramfiles);\n"             >> $@
	$(QUELL)$(foreach flnum,$(paramfile_num_list),\
            fl_name=$(PARAM_FILE_$(flnum)_NAME);\
            varnm=`printf "$${fl_name}" | \
                       sed -e 's/^\([[:digit:]]\)/__\1/' -e 's/[^[:alnum:]]/_/g'` && \
                xxd -i $${fl_name} | \
                sed -e "s/$${varnm}/parameter_file_$(flnum)/g" >> $@ && \
                printf "char parameter_file_$(flnum)_name[] = \"$${fl_name}\";\n" >> $@; \
         )
	$(QUELL)printf "\n\n"                                                             >> $@
	$(QUELL)\
            fl_name=$(METADATA_FILE_NAME);\
            varnm=`printf "$${fl_name}" | \
                       sed -e 's/^\([[:digit:]]\)/__\1/' -e 's/[^[:alnum:]]/_/g'` && \
                xxd -i $${fl_name} | \
                sed -e "s/$${varnm}/metadata_file/g" >> $@ && \
                printf "char metadata_file_name[] = \"$${fl_name}\";\n" >> $@;
	$(QUELL)printf "\n\n"                                                             >> $@
	$(QUELL)printf "char kim_item_type[] = \"simulator-model\";\n"                    >> $@
	$(QUELL)printf "char $(strip $(MODEL_NAME))_compiled_with_version[]\n"            >> $@
	$(QUELL)printf "  = \"$(VERSION_FULL)\";\n"                                       >> $@
	$(QUELL)printf "}\n"                                                              >> $@

lib$(MODEL_LIB).a: lib$(MODEL_LIB_BUILD).a
	@printf "Creating... $@.\n"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).a" "lib$(MODEL_LIB).a"

lib$(MODEL_LIB).so: lib$(MODEL_LIB_BUILD).so
	@printf "Creating... $@.\n"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).so" "lib$(MODEL_LIB).so"

lib$(MODEL_LIB_BUILD).a: $(SIMULATOR_MODEL_NAME).o
	@printf "Creating... $@.\n"
	$(QUELL)ar rcs $@ $(SIMULATOR_MODEL_NAME).o

lib$(MODEL_LIB_BUILD).so: lib$(MODEL_LIB_BUILD).a $(EXPORT_LIST_NAME)
	@printf "Creating... $@.\n"
	$(QUELL)$(LD) $(ARCHFLAG) $(LDSHAREDFLAG) \
                      $(LDEXPORTLISTFLAG) $(LDFLAGS) $(OUTPUTINFLAG) lib$(MODEL_LIB_BUILD).so \
                      $(LDWHOLEARCHIVESTARTFLAG) $< $(LDWHOLEARCHIVEENDFLAG) $(LDLIBS)

$(EXPORT_LIST_NAME): $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
ifeq (darwin, $(KIM_SYSTEMLINKER))
	$(QUELL)printf "_number_of_parameter_files\n"                        > $@
	$(QUELL)$(foreach flnum,$(paramfile_num_list),\
             printf "_parameter_file_$(flnum)\n" >> $@; \
             printf "_parameter_file_$(flnum)_len\n" >> $@; \
             printf "_parameter_file_$(flnum)_name\n" >> $@; \
          )
	$(QUELL)printf "_metadata_file\n"                                   >> $@
	$(QUELL)printf "_metadata_file_name\n"                              >> $@
	$(QUELL)printf "_metadata_file_len\n"                               >> $@
	$(QUELL)printf "_kim_item_type\n"                                   >> $@
	$(QUELL)printf "_$(MODEL_NAME)_compiled_with_version\n"             >> $@
else # everything else (linux and freebsd)
	$(QUELL)printf "{\n"                                                 > $@
	$(QUELL)printf "   global:\n"                                       >> $@
	$(QUELL)printf "           number_of_parameter_files;\n"            >> $@
	$(QUELL)$(foreach flnum,$(paramfile_num_list),\
            printf "parameter_file_$(flnum);\n" >> $@; \
            printf "parameter_file_$(flnum)_len;\n" >> $@; \
            printf "parameter_file_$(flnum)_name;\n" >> $@; \
         )
	$(QUELL)printf "           metadata_file;\n"                        >> $@
	$(QUELL)printf "           metadata_file_len;\n"                    >> $@
	$(QUELL)printf "           metadata_file_name;\n"                   >> $@
	$(QUELL)printf "           kim_item_type;\n"                        >> $@
	$(QUELL)printf "           $(MODEL_NAME)_compiled_with_version;\n"  >> $@
	$(QUELL)printf "\n"                                                 >> $@
	$(QUELL)printf "   local: *;\n"                                     >> $@
	$(QUELL)printf "};\n"                                               >> $@
endif

kim-item-type:
	@printf "SimulatorModel"

model-name:
	@printf "$(MODEL_NAME)"

clean:
	@printf "Cleaning... Model.......... $(MODEL_NAME).\n"
	$(QUELL)rm -f lib$(LIB_ROOT)* \
                      $(addprefix $(SIMULATOR_MODEL_NAME).,o cpp) \
                      $(EXPORT_LIST_NAME)

check-for-empty-environment-collection:
	$(QUELL)if test x"$(install_modeldir)" = x"--empty--/$(MODEL_NAME)"; then \
                  printf "Environment variable '$(shell $(COLLECTIONS_INFO) env env | sed -e 's/\([^[:space:]]*\) .*/\1/')' is empty.\n"; \
                  false; else true; \
                fi

installdirs:
	$(QUELL)fl="$(install_simmodeldir)" && \
                if test -d "$$fl"; then rm -rf "$$fl"; fi && \
                $(INSTALL_PROGRAM) -d -m 0755  "$$fl"

COLLECTIONS_INFO = $(libexecdir)/$(full_package_name)/$(full_package_name)-collections-info
SYSTEM_MODELS_DIR = $(DESTDIR)$(shell $(COLLECTIONS_INFO) system models)
USER_MODELS_DIR = $(DESTDIR)$(shell $(COLLECTIONS_INFO) config_file models)
ENVIRONMENT_MODELS_DIR = $(word 1,$(shell $(COLLECTIONS_INFO) env models))
ENVIRONMENT_MODELS_DIR := $(strip $(if $(ENVIRONMENT_MODELS_DIR), $(DESTDIR)$(ENVIRONMENT_MODELS_DIR), --empty--))
ifeq ($(USER_MODELS_DIR),)
  $(error Invalid config file)
endif
install-system: install_simmodeldir = $(SYSTEM_MODELS_DIR)/$(MODEL_NAME)
install-user:   install_simmodeldir = $(USER_MODELS_DIR)/$(MODEL_NAME)
install-environment: install_simmodeldir = $(ENVIRONMENT_MODELS_DIR)/$(MODEL_NAME)
install-system install-user install-environment: install-%: check-for-empty-environment-collection all installdirs
	@printf "Installing..... Model.......... $(MODEL_NAME).\n"
	$(QUELL)$(INSTALL_PROGRAM) -m 0755 "lib$(MODEL_LIB_BUILD).so" "$(install_simmodeldir)/lib$(MODEL_LIB_BUILD).so"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).so" "$(install_simmodeldir)/lib$(MODEL_LIB).so"

uninstall-system:      install_simmodeldir = $(SYSTEM_MODELS_DIR)/$(MODEL_NAME)
uninstall-user:        install_simmodeldir = $(USER_MODELS_DIR)/$(MODEL_NAME)
uninstall-environment: install_simmodeldir = $(ENVIRONMENT_MODELS_DIR)/$(MODEL_NAME)
uninstall-system uninstall-user uninstall-environment: uninstall-%: check-for-empty-environment-collection
	@printf "Uninstalling... Model.......... $(MODEL_NAME).\n"
	$(QUELL)fl="$(install_simmodeldir)" && if test -d "$$fl"; then rm -rf "$$fl"; fi
