#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2015, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#

#
# Release: This file is part of the kim-api.git repository.
#


# sanity checks
ifndef KIM_DIR
   $(error Make variable KIM_DIR must be defined)
endif
include $(KIM_DIR)/$(builddir)/Makefile.SanityCheck

# Clean up variables
MODEL_NAME := $(strip $(MODEL_NAME))
MODEL_KIM_FILE := $(strip $(MODEL_KIM_FILE))
MODEL_INIT_FUNCTION_NAME := $(strip $(MODEL_INIT_FUNCTION_NAME))

# Set SO variables
%.so: SO_IS_MODEL:=true
%.so: SO_IS_PARAMETERIZED:=

#build target .a or .so for models
MODEL_BUILD_TARGET := lib$(MODEL_LIB).a
ifneq ($(KIM_LINK),static-link)
   MODEL_BUILD_TARGET := $(patsubst %.a,%.so, $(MODEL_BUILD_TARGET))
else
   ifneq ("1","$(MAKELEVEL)")
     MODEL_BUILD_TARGET += STATIC_COMP_WARNING
   endif
endif

.PHONY: STATIC_COMP_WARNING clean install installdirs uninstall kim-item-type model-name model-kim-file
STATIC_COMP_WARNING:
	@printf '\n'; \
        printf '*******************************************************************************\n'; \
        printf '*******                  Compiling in static link mode                  *******\n'; \
        printf '*******            You probably want to execute make from the           *******\n'; \
        printf '*******                        $$KIM_DIR directory                       *******\n'; \
        printf '*******************************************************************************\n'; \

$(KIM_STR_NAME).c: $(MODEL_KIM_FILE)

all: $(MODEL_BUILD_TARGET)

.INTERMEDIATE: init_wrapper.cpp
init_wrapper.cpp: Makefile
	@printf "Creating... intermediate file... $@.\n"
	$(QUELL)printf "extern \"C\"\n"                                                 > $@
	$(QUELL)printf "{\n"                                                           >> $@
	$(QUELL)printf "   int $(strip $(MODEL_INIT_FUNCTION_NAME))(void *kimmdl);\n"  >> $@
	$(QUELL)printf "   int (* $(strip $(MODEL_NAME))_init_pointer)(void*) =\n"     >> $@
	$(QUELL)printf "      $(strip $(MODEL_INIT_FUNCTION_NAME));\n"                 >> $@
	$(QUELL)printf "}\n"                                                           >> $@

lib$(MODEL_LIB).a: lib$(MODEL_LIB_BUILD).a
	@printf "Creating... $@.\n"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).a" "lib$(MODEL_LIB).a"

lib$(MODEL_LIB).so: lib$(MODEL_LIB_BUILD).so
	@printf "Creating... $@.\n"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).so" "lib$(MODEL_LIB).so"

lib$(MODEL_LIB_BUILD).a: $(LOCALOBJ) init_wrapper.o $(KIM_STR_NAME).o
	@printf "Creating... $@.\n"
	$(QUELL)ar rcs $@ $(LOCALOBJ) init_wrapper.o $(KIM_STR_NAME).o

$(EXPORT_LIST_NAME): $(KIM_MAKE_FILES) Makefile
	@printf "Creating... intermediate file... $@.\n"
ifeq (darwin, $(KIM_SYSTEMLINKER))
	$(QUELL)printf "_$(MODEL_NAME)_init_pointer\n"                       > $@
	$(QUELL)printf "_$(MODEL_NAME)_$(KIM_STR_NAME)\n"                   >> $@
	$(QUELL)printf "_$(MODEL_NAME)_$(KIM_STR_NAME)_len\n"               >> $@
else # everything else (linux and freebsd)
	$(QUELL)printf "{\n"                                                 > $@
	$(QUELL)printf "   global:\n"                                       >> $@
	$(QUELL)printf "           $(MODEL_NAME)_init_pointer;\n"           >> $@
	$(QUELL)printf "           $(MODEL_NAME)_$(KIM_STR_NAME);\n"        >> $@
	$(QUELL)printf "           $(MODEL_NAME)_$(KIM_STR_NAME)_len;\n"    >> $@
	$(QUELL)printf "\n"                                                 >> $@
	$(QUELL)printf "   local: *;\n"                                     >> $@
	$(QUELL)printf "};\n"                                               >> $@
endif

kim-item-type:
	@printf "Model"

model-name:
	@printf "$(MODEL_NAME)"

model-kim-file:
	@printf "$(MODEL_KIM_FILE)"

$(LOCALOBJ): Makefile

Makefile: $(KIM_MAKE_FILES) $(KIM_DIR)/$(builddir)/Makefile.Model
	$(QUELL)touch Makefile

clean:
	@printf "Cleaning... Model.......... $(MODEL_NAME).\n"
	$(QUELL)rm -f $(LOCALOBJ) *.mod lib$(LIB_ROOT)* .lib$(LIB_ROOT)* \
                      $(addprefix $(KIM_STR_NAME).,o c) \
                      $(addprefix init_wrapper.,o cpp) $(LOCALCLEAN) \
                      $(EXPORT_LIST_NAME)

install_modeldir = $(dest_package_dir)/$(modelsdir)/$(MODEL_NAME)

installdirs:
ifneq (static-link,$(KIM_LINK))
	$(QUELL)fl="$(install_modeldir)" && \
                if test -d "$$fl"; then rm -rf "$$fl"; fi && \
                $(INSTALL_PROGRAM) -d -m 0755 "$$fl"
endif

install: DOT:=$(shell if test -f ".lib$(MODEL_LIB_BUILD).so"; then printf "."; fi)
install: all installdirs
	@printf "Installing...($(dest_package_dir))................. Model.......... $(MODEL_NAME)"
ifneq (static-link,$(KIM_LINK))
	@printf ".\n"
	$(QUELL)$(INSTALL_PROGRAM) -m 0755 "$(DOT)lib$(MODEL_LIB_BUILD).so" "$(install_modeldir)/lib$(MODEL_LIB_BUILD).so"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).so" "$(install_modeldir)/lib$(MODEL_LIB).so"
else
	@printf ": nothing to be done for static-link.\n"
endif

uninstall:
	@printf "Uninstalling...($(dest_package_dir))................. Model.......... $(MODEL_NAME)"
ifneq (static-link,$(KIM_LINK))
	@printf ".\n"
	$(QUELL)fl="$(install_modeldir)" && if test -d "$$fl"; then rm -rf "$$fl"; fi
else
	@printf ": nothing to be done for static-link.\n"
endif
