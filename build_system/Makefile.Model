#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2018, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#

#
# Release: This file is part of the kim-api.git repository.
#


# sanity checks
ifndef KIM_DIR
   $(error Make variable KIM_DIR must be defined)
endif
include $(KIM_DIR)/$(builddir)/Makefile.SanityCheck

# Set include flags
KIMINCLUDEFLAGS = -I$(includedir)/$(full_package_name)

# Clean up variables
MODEL_NAME := $(strip $(MODEL_NAME))
MODEL_KIM_FILE := $(strip $(MODEL_KIM_FILE))
MODEL_INIT_FUNCTION_NAME := $(strip $(MODEL_INIT_FUNCTION_NAME))

MODEL_BUILD_TARGET := lib$(MODEL_LIB).so

#full lib name
MODEL_LIB_BUILD = $(LIB_ROOT)-model-v$(VERSION_FULL)

# Add this file and item makefile to makefiles list
KIM_MAKE_FILES += $(KIM_DIR)/$(builddir)/Makefile.Model Makefile

.PHONY: clean installdirs check-for-empty--environment-collection kim-item-type model-name model-kim-file
.PHONY: install-system install-user install-environment
.PHONY: uninstall-system uninstall-user uninstall-environment

# descriptor file make rule
.INTERMEDIATE: kim_str.c
kim_str.c: $(MODEL_KIM_FILE) $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
	$(QUELL)varnm=`printf "$(MODEL_KIM_FILE)" | \
                       sed -e 's/^\([[:digit:]]\)/__\1/' -e 's/[^[:alnum:]]/_/g'` && \
                xxd -i $(MODEL_KIM_FILE) | \
                sed -e "s/$${varnm}/$(MODEL_NAME)_kim_str/g" > $@


all: $(MODEL_BUILD_TARGET)

.INTERMEDIATE: init_wrapper.cpp
init_wrapper.cpp: $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
	$(QUELL)printf "extern \"C\"\n"                                                    > $@
	$(QUELL)printf "{\n"                                                              >> $@
	$(QUELL)printf "   char kim_item_type[] = \"stand-alone-model\";\n"               >> $@
	$(QUELL)printf "   int $(strip $(MODEL_INIT_FUNCTION_NAME))(void *kimmdl);\n"     >> $@
	$(QUELL)printf "   int (* $(strip $(MODEL_NAME))_init_pointer)(void*) =\n"        >> $@
	$(QUELL)printf "      $(strip $(MODEL_INIT_FUNCTION_NAME));\n"                    >> $@
	$(QUELL)printf "   char $(strip $(MODEL_NAME))_compiled_with_version[]\n"         >> $@
	$(QUELL)printf "      = \"$(VERSION_FULL)\";\n"                                   >> $@
	$(QUELL)printf "}\n"                                                              >> $@

lib$(MODEL_LIB).a: lib$(MODEL_LIB_BUILD).a
	@printf "Creating... $@.\n"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).a" "lib$(MODEL_LIB).a"

lib$(MODEL_LIB).so: lib$(MODEL_LIB_BUILD).so
	@printf "Creating... $@.\n"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).so" "lib$(MODEL_LIB).so"

lib$(MODEL_LIB_BUILD).a: $(LOCALOBJ) init_wrapper.o kim_str.o
	@printf "Creating... $@.\n"
	$(QUELL)ar rcs $@ $(LOCALOBJ) init_wrapper.o kim_str.o

lib$(MODEL_LIB_BUILD).so: lib$(MODEL_LIB_BUILD).a $(EXPORT_LIST_NAME)
	@printf "Creating... $@.\n"
	$(QUELL)$(LD) $(ARCHFLAG) $(LDSHAREDFLAG) \
                      $(LDEXPORTLISTFLAG) $(LDFLAGS) -L$(libdir) $(OUTPUTINFLAG) lib$(MODEL_LIB_BUILD).so \
                      $(LDWHOLEARCHIVESTARTFLAG) $< $(LDWHOLEARCHIVEENDFLAG) $(LDLIBS) -l$(KIM_LIB)

$(EXPORT_LIST_NAME): $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
ifeq (darwin, $(KIM_SYSTEMLINKER))
	$(QUELL)printf "_kim_item_type\n"                                    > $@
	$(QUELL)printf "_$(MODEL_NAME)_init_pointer\n"                      >> $@
	$(QUELL)printf "_$(MODEL_NAME)_kim_str\n"                           >> $@
	$(QUELL)printf "_$(MODEL_NAME)_kim_str_len\n"                       >> $@
	$(QUELL)printf "_$(MODEL_NAME)_kim_str_len\n"                       >> $@
	$(QUELL)printf "_$(MODEL_NAME)_compiled_with_version\n"             >> $@
else # everything else (linux and freebsd)
	$(QUELL)printf "{\n"                                                 > $@
	$(QUELL)printf "   global:\n"                                       >> $@
	$(QUELL)printf "           kim_item_type;\n"                        >> $@
	$(QUELL)printf "           $(MODEL_NAME)_init_pointer;\n"           >> $@
	$(QUELL)printf "           $(MODEL_NAME)_kim_str;\n"                >> $@
	$(QUELL)printf "           $(MODEL_NAME)_kim_str_len;\n"            >> $@
	$(QUELL)printf "           $(MODEL_NAME)_compiled_with_version;\n"  >> $@
	$(QUELL)printf "\n"                                                 >> $@
	$(QUELL)printf "   local: *;\n"                                     >> $@
	$(QUELL)printf "};\n"                                               >> $@
endif

kim-item-type:
	@printf "Model"

model-name:
	@printf "$(MODEL_NAME)"

model-kim-file:
	@printf "$(MODEL_KIM_FILE)"

$(LOCALOBJ): $(KIM_MAKE_FILES)

clean:
	@printf "Cleaning... Model.......... $(MODEL_NAME).\n"
	$(QUELL)rm -f $(LOCALOBJ) *.mod lib$(LIB_ROOT)* \
                      $(addprefix kim_str.,o c) \
                      $(addprefix init_wrapper.,o cpp) $(LOCALCLEAN) \
                      $(EXPORT_LIST_NAME)

check-for-empty-environment-collection:
	$(QUELL)if test x"$(install_modeldir)" = x"--empty--/$(MODEL_NAME)"; then \
                  printf "Environment variable '$(shell $(COLLECTIONS_INFO) env env | sed -e 's/\([^[:space:]]*\) .*/\1/')' is empty.\n"; \
                  false; else true; \
                fi

installdirs:
	$(QUELL)fl="$(install_modeldir)" && \
                if test -d "$$fl"; then rm -rf "$$fl"; fi && \
                $(INSTALL_PROGRAM) -d -m 0755 "$$fl"

COLLECTIONS_INFO = $(libexecdir)/$(full_package_name)/$(full_package_name)-collections-info
SYSTEM_MODELS_DIR = $(DESTDIR)$(shell $(COLLECTIONS_INFO) system models)
USER_MODELS_DIR = $(DESTDIR)$(shell $(COLLECTIONS_INFO) config_file models)
ENVIRONMENT_MODELS_DIR = $(word 1,$(shell $(COLLECTIONS_INFO) env models))
ENVIRONMENT_MODELS_DIR := $(strip $(if $(ENVIRONMENT_MODELS_DIR), $(DESTDIR)$(ENVIRONMENT_MODELS_DIR), --empty--))
ifeq ($(USER_MODELS_DIR),)
  $(error Invalid config file)
endif
install-system:      install_modeldir = $(SYSTEM_MODELS_DIR)/$(MODEL_NAME)
install-user:        install_modeldir = $(USER_MODELS_DIR)/$(MODEL_NAME)
install-environment: install_modeldir = $(ENVIRONMENT_MODELS_DIR)/$(MODEL_NAME)
install-system install-user install-environment: install-%: check-for-empty-environment-collection all installdirs
	@printf "Installing...($*)................. Model.......... $(MODEL_NAME).\n"
	$(QUELL)$(INSTALL_PROGRAM) -m 0755 "lib$(MODEL_LIB_BUILD).so" "$(install_modeldir)/lib$(MODEL_LIB_BUILD).so"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).so" "$(install_modeldir)/lib$(MODEL_LIB).so"

uninstall-system:      install_modeldir = $(SYSTEM_MODELS_DIR)/$(MODEL_NAME)
uninstall-user:        install_modeldir = $(USER_MODELS_DIR)/$(MODEL_NAME)
uninstall-environment: install_modeldir = $(ENVIRONMENT_MODELS_DIR)/$(MODEL_NAME)
uninstall-system uninstall-user uninstall-environment: uninstall-%: check-for-empty-environment-collection
	@printf "Uninstalling...($*)................. Model.......... $(MODEL_NAME).\n"
	$(QUELL)fl="$(install_modeldir)" && if test -d "$$fl"; then rm -rf "$$fl"; fi
