#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2017, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#

#
# Release: This file is part of the kim-api.git repository.
#


# sanity checks
ifndef KIM_DIR
   $(error Make variable KIM_DIR must be defined)
endif
include $(KIM_DIR)/$(builddir)/Makefile.SanityCheck

# Set include flags
KIMINCLUDEFLAGS = -I$(includedir)/$(full_package_name)

# Clean up variables
MODEL_NAME := $(strip $(MODEL_NAME))
MODEL_CREATE_FUNCTION_NAME := $(strip $(MODEL_CREATE_FUNCTION_NAME))
MODEL_CREATE_FUNCTION_LANG := $(strip $(MODEL_CREATE_FUNCTION_LANG))
ifneq (,$(filter-out cpp c fortran,$(MODEL_CREATE_FUNCTION_LANG)))
   $(error Unknown MODEL_CREATE_FUNCTION_LANG value: $(MODEL_CREATE_FUNCTION_LANG))
endif

MODEL_BUILD_TARGET := lib$(MODEL_LIB).so

#full lib name
MODEL_LIB_BUILD = $(LIB_ROOT)-model-v$(VERSION_FULL)

# Add this file and item makefile to makefiles list
KIM_MAKE_FILES += $(KIM_DIR)/$(builddir)/Makefile.StandAloneModel Makefile

.PHONY: clean install-system install-user installdirs uninstall-system uninstall-user kim-item-type model-name model-kim-file

all: $(MODEL_BUILD_TARGET)

.INTERMEDIATE: init_wrapper.cpp
init_wrapper.cpp: $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
	$(QUELL)printf "extern \"C\"\n"                                                                 > $@
	$(QUELL)printf "{\n"                                                                           >> $@
	$(QUELL)printf "char kim_item_type[] = \"stand-alone-model\";\n"                               >> $@
	$(QUELL)printf "int $(strip $(MODEL_CREATE_FUNCTION_NAME))();\n"                               >> $@
	$(QUELL)printf "int (* $(strip $(MODEL_NAME))_create_pointer)()\n"                             >> $@
	$(QUELL)printf "  = $(strip $(MODEL_CREATE_FUNCTION_NAME));\n"                                 >> $@
	$(QUELL)printf "char $(strip $(MODEL_NAME))_compiled_with_version[]\n"                         >> $@
	$(QUELL)printf "  = \"$(VERSION_FULL)\";\n"                                                    >> $@
	$(QUELL)printf "char $(strip $(MODEL_NAME))_language[] = \"$(MODEL_CREATE_FUNCTION_LANG)\";\n" >> $@
	$(QUELL)printf "char const * const $(strip $(MODEL_NAME))_driver_name = 0;\n"                  >> $@
	$(QUELL)printf "}\n"                                                                           >> $@

lib$(MODEL_LIB).a: lib$(MODEL_LIB_BUILD).a
	@printf "Creating... $@.\n"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).a" "lib$(MODEL_LIB).a"

lib$(MODEL_LIB).so: lib$(MODEL_LIB_BUILD).so
	@printf "Creating... $@.\n"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).so" "lib$(MODEL_LIB).so"

lib$(MODEL_LIB_BUILD).a: $(LOCALOBJ) init_wrapper.o
	@printf "Creating... $@.\n"
	$(QUELL)ar rcs $@ $(LOCALOBJ) init_wrapper.o

lib$(MODEL_LIB_BUILD).so: lib$(MODEL_LIB_BUILD).a $(EXPORT_LIST_NAME)
	@printf "Creating... $@.\n"
	$(QUELL)$(LD) $(ARCHFLAG) $(LDSHAREDFLAG) \
                      $(LDEXPORTLISTFLAG) $(LDFLAGS) -L$(libdir) $(OUTPUTINFLAG) lib$(MODEL_LIB_BUILD).so \
                      $(LDWHOLEARCHIVESTARTFLAG) $< $(LDWHOLEARCHIVEENDFLAG) $(LDLIBS) -l$(KIM_LIB)

$(EXPORT_LIST_NAME): $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
ifeq (darwin, $(KIM_SYSTEMLINKER))
	$(QUELL)printf "_kim_item_type\n"                                    > $@
	$(QUELL)printf "_$(MODEL_NAME)_create_pointer\n"                    >> $@
	$(QUELL)printf "_$(MODEL_NAME)_compiled_with_version\n"             >> $@
	$(QUELL)printf "_$(MODEL_NAME)_language\n"                          >> $@
	$(QUELL)printf "_$(MODEL_NAME)_driver_name\n"                       >> $@
else # everything else (linux and freebsd)
	$(QUELL)printf "{\n"                                                 > $@
	$(QUELL)printf "   global:\n"                                       >> $@
	$(QUELL)printf "           kim_item_type;\n"                        >> $@
	$(QUELL)printf "           $(MODEL_NAME)_create_pointer;\n"         >> $@
	$(QUELL)printf "           $(MODEL_NAME)_compiled_with_version;\n"  >> $@
	$(QUELL)printf "           $(MODEL_NAME)_language;\n"               >> $@
	$(QUELL)printf "           $(MODEL_NAME)_driver_name;\n"            >> $@
	$(QUELL)printf "\n"                                                 >> $@
	$(QUELL)printf "   local: *;\n"                                     >> $@
	$(QUELL)printf "};\n"                                               >> $@
endif

kim-item-type:
	@printf "Model"

model-name:
	@printf "$(MODEL_NAME)"

$(LOCALOBJ): $(KIM_MAKE_FILES)

clean:
	@printf "Cleaning... Model.......... $(MODEL_NAME).\n"
	$(QUELL)rm -f $(LOCALOBJ) *.mod lib$(LIB_ROOT)* \
                      $(addprefix init_wrapper.,o cpp) $(LOCALCLEAN) \
                      $(EXPORT_LIST_NAME)

installdirs:
	$(QUELL)fl="$(install_modeldir)" && \
                if test -d "$$fl"; then rm -rf "$$fl"; fi && \
                $(INSTALL_PROGRAM) -d -m 0755 "$$fl"

COLLECTIONS_INFO = $(libexecdir)/$(full_package_name)/$(full_package_name)-collections-info
install-system: install_modeldir = $(shell $(COLLECTIONS_INFO) system models)/$(MODEL_NAME)
install-user:   install_modeldir = $(shell $(COLLECTIONS_INFO) config_file models)/$(MODEL_NAME)
install-system install-user: install-%: all installdirs
	@printf "Installing...($*)................. Model.......... $(MODEL_NAME).\n"
	$(QUELL)$(INSTALL_PROGRAM) -m 0755 "lib$(MODEL_LIB_BUILD).so" "$(install_modeldir)/lib$(MODEL_LIB_BUILD).so"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).so" "$(install_modeldir)/lib$(MODEL_LIB).so"

uninstall-system: uninstall_modeldir = $(shell $(COLLECTIONS_INFO) system models)/$(MODEL_NAME)
uninstall-user:   uninstall_modeldir = $(shell $(COLLECTIONS_INFO) config_file models)/$(MODEL_NAME)
uninstall-system uninstall-user: uninstall-%:
	@printf "Uninstalling...($*)................. Model.......... $(MODEL_NAME).\n"
	$(QUELL)fl="$(uninstall_modeldir)" && if test -d "$$fl"; then rm -rf "$$fl"; fi
